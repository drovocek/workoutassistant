plugins {
    id 'java'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'com.github.johnrengelman.shadow'
}

allprojects {
    apply plugin: 'java-library' //https://reflectoring.io/gradle-pollution-free-dependencies/
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'

    group 'ru.soft'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'

    repositories {
        mavenLocal()
        maven {
            url = uri('https://repo.maven.apache.org/maven2/')
        }
        maven {
            url = uri('https://maven.vaadin.com/vaadin-prereleases/')
        }
        maven {
            url = uri('https://maven.vaadin.com/vaadin-addons')
        }
        maven {
            url = uri('https://repo.spring.io/milestone')
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
            mavenBom "org.testcontainers:testcontainers-bom:$testcontainersVersion"
            mavenBom "dev.hilla:hilla-bom:$hillaVersion"
//            mavenBom "com.vaadin:vaadin-bom:$vaadinVersion"
        }
        dependencies {
            dependency "org.springdoc:springdoc-openapi-starter-webmvc-ui:$springdocVersion"
        }
    }

    dependencies {
        implementation 'ch.qos.logback:logback-classic'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
    }

    configurations.configureEach {
        resolutionStrategy {
            failOnVersionConflict()
        }
        resolutionStrategy {
            force('org.seleniumhq.selenium:selenium-java:4.6.0')
            force('commons-io:commons-io:2.11.0')
            force('com.google.code.findbugs:jsr305:3.0.2')
            force('com.google.guava:guava:31.1-jre')
            force('com.github.fge:jackson-coreutils:1.8')
            force('jakarta.inject:jakarta.inject-api:2.0.1')
        }
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    compileJava.options.encoding = 'UTF-8'

    tasks.withType(JavaCompile) {
        options.with {
            encoding = 'UTF-8'
        }
    }
}
